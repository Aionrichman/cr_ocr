// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

#include "ChineseRecoginzeService.h"
#include "wordRecognize.h"

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;


using namespace  ::chineserecoginze;

class ChineseRecoginzeServiceHandler : virtual public ChineseRecoginzeServiceIf {

	ChineseRecognize *recognizer;

public:
	ChineseRecoginzeServiceHandler(ChineseRecognize *recognizerPtr) {
		recognizer = recognizerPtr;
	}

	void chineseRecognize(std::vector<std::vector<int32_t> > & _return, const std::string& imgRawData) {
		printf("chineseRecognize\n");

		const char* raw = imgRawData.c_str();
		std::vector<char> imgBytes(raw, raw + imgRawData.size());
		cv::Mat dataMat(imgBytes);
		cv::Mat src_img = cv::imdecode(dataMat, cv::IMREAD_GRAYSCALE);
	
		vector<vector<int>> results = doubleRecognize(src_img, recognizer);

		_return = results;
  }

};

int main(int argc, char **argv) {
	ChineseRecognize* recognizerPtr = new ChineseRecognize("cnftl_mobile.pd", IMG_HEIGHT, IMG_WIDTH, 1, "input_1:0", "dense_2/Softmax:0");

	int port = 9090;
	boost::shared_ptr<ChineseRecoginzeServiceHandler> handler(new ChineseRecoginzeServiceHandler(recognizerPtr));
	boost::shared_ptr<TProcessor> processor(new ChineseRecoginzeServiceProcessor(handler));
	boost::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
	boost::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
	boost::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

	TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
	server.serve();
	return 0;
}

